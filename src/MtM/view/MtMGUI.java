/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MtM.view;

import MtM.model.business.manager.Game;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Colin
 */
public class MtMGUI extends javax.swing.JFrame {

    private final Timer timer;
    private final Game game;
    private static final String SAVE_PATH = "./save/";

    /**
     * should be called after a game is loaded to update things
     */
    private void updateOnLoad() {
        this.setTitle("Manage the Minions - " + game.getSaveFile());
    }

    private void saveAs() {
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(SAVE_PATH));
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            game.saveGame(file.getName());
            log("Game saved as: " + file.getName());
        }
    }

    private void log(String s) {
        log.append(s + '\n');
    }

    private void openFile() {
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(SAVE_PATH));
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            if (game.loadGame(file.getName())) {
                updateOnLoad();
                log("Game loaded: " + file.getName());
            } else {
                log("Load FAILED: " + file.getName());
            }

        }
    }

    /**
     * Registers stuff that happens when the program exits
     */
    private void initOnExit() {
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent winEvt) {
                timer.stop();
                game.saveGame();
                game.saveProps();
                System.exit(0);
            }
        });
    }

    private void scrollToBottom(JScrollPane scrollPane) {
        SwingUtilities.invokeLater(() -> {
            JScrollBar vertical = scrollPane.getVerticalScrollBar();
            vertical.setValue(vertical.getMaximum());
        });
    }

    /**
     * Handles tick updates
     */
    class Updater implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("tick");
        }

    }

    /**
     * Creates new form MtM
     */
    public MtMGUI() {
        initComponents();
        game = new Game();
        timer = new Timer(game.getTickRate(), new Updater());

        minionPane.addActionListener((ActionEvent e) -> {
            minionDisplay.setText(game.printMinion(Integer.parseInt(e.getActionCommand())));
        });
        
        missionPane.addActionListener((ActionEvent e) -> {
            missionDisplay.setText(game.printMissionn(Integer.parseInt(e.getActionCommand())));
        });
        
        updateOnLoad();
        
        timer.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logScrollPane = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        mScrollPane = new javax.swing.JScrollPane();
        mViewPanel = new javax.swing.JPanel();
        minionPane = new MtM.view.swingcomponents.MPanel();
        missionPane = new MtM.view.swingcomponents.MPanel();
        minionDisplayScrollPane = new javax.swing.JScrollPane();
        minionDisplay = new javax.swing.JTextArea();
        missionDisplayScrollPane = new javax.swing.JScrollPane();
        missionDisplay = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileSave = new javax.swing.JMenuItem();
        fileSaveAs = new javax.swing.JMenuItem();
        fileOpen = new javax.swing.JMenuItem();
        fileExit = new javax.swing.JMenuItem();
        debugMenu = new javax.swing.JMenu();
        debugSetTickRate = new javax.swing.JMenuItem();
        debugAddMinion = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 153, 255));
        setResizable(false);

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        log.setFocusable(false);
        logScrollPane.setViewportView(log);

        mScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        minionPane.setToolTipText("");
        minionPane.setAutoscrolls(true);

        missionPane.setToolTipText("");

        javax.swing.GroupLayout mViewPanelLayout = new javax.swing.GroupLayout(mViewPanel);
        mViewPanel.setLayout(mViewPanelLayout);
        mViewPanelLayout.setHorizontalGroup(
            mViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mViewPanelLayout.createSequentialGroup()
                .addComponent(minionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(missionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        mViewPanelLayout.setVerticalGroup(
            mViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(minionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(missionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        missionPane.getAccessibleContext().setAccessibleName("");

        mScrollPane.setViewportView(mViewPanel);

        minionDisplayScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        minionDisplay.setEditable(false);
        minionDisplay.setColumns(20);
        minionDisplay.setRows(5);
        minionDisplay.setFocusable(false);
        minionDisplayScrollPane.setViewportView(minionDisplay);

        missionDisplayScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        missionDisplay.setEditable(false);
        missionDisplay.setColumns(20);
        missionDisplay.setRows(5);
        missionDisplay.setFocusable(false);
        missionDisplay.setPreferredSize(new java.awt.Dimension(130, 94));
        missionDisplayScrollPane.setViewportView(missionDisplay);

        fileMenu.setText("File");

        fileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileSave.setText("Save");
        fileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveActionPerformed(evt);
            }
        });
        fileMenu.add(fileSave);

        fileSaveAs.setText("Save As...");
        fileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileSaveAs);

        fileOpen.setText("Open...");
        fileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpen);

        fileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        fileExit.setText("Exit");
        fileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitActionPerformed(evt);
            }
        });
        fileMenu.add(fileExit);

        menuBar.add(fileMenu);

        debugMenu.setText("Debug");

        debugSetTickRate.setText("Set Tick Rate");
        debugSetTickRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugSetTickRateActionPerformed(evt);
            }
        });
        debugMenu.add(debugSetTickRate);

        debugAddMinion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        debugAddMinion.setText("Add Minion");
        debugAddMinion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugAddMinionActionPerformed(evt);
            }
        });
        debugMenu.add(debugAddMinion);

        menuBar.add(debugMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(minionDisplayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(missionDisplayScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(minionDisplayScrollPane)
                    .addComponent(mScrollPane)
                    .addComponent(missionDisplayScrollPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_fileSaveAsActionPerformed

    private void fileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSaveActionPerformed
        if (!game.saveGame()) {
            saveAs();
        } else {
            log("Game saved.");
        }
    }//GEN-LAST:event_fileSaveActionPerformed

    private void debugSetTickRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugSetTickRateActionPerformed
        int newTickRate = Integer.parseInt(JOptionPane.showInputDialog(this, "New tick rate:"));
        timer.setDelay(newTickRate);
    }//GEN-LAST:event_debugSetTickRateActionPerformed

    private void fileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenActionPerformed
        openFile();
    }//GEN-LAST:event_fileOpenActionPerformed

    private void fileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_fileExitActionPerformed

    private void debugAddMinionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugAddMinionActionPerformed
        minionPane.addMBtn();    
        mViewPanel.revalidate();
        mViewPanel.repaint();
        scrollToBottom(mScrollPane);
    }//GEN-LAST:event_debugAddMinionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MtMGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MtMGUI gui = new MtMGUI();
            gui.setVisible(true);
            gui.initOnExit();
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem debugAddMinion;
    private javax.swing.JMenu debugMenu;
    private javax.swing.JMenuItem debugSetTickRate;
    private javax.swing.JMenuItem fileExit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileOpen;
    private javax.swing.JMenuItem fileSave;
    private javax.swing.JMenuItem fileSaveAs;
    private javax.swing.JTextArea log;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JScrollPane mScrollPane;
    private javax.swing.JPanel mViewPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea minionDisplay;
    private javax.swing.JScrollPane minionDisplayScrollPane;
    private MtM.view.swingcomponents.MPanel minionPane;
    private javax.swing.JTextArea missionDisplay;
    private javax.swing.JScrollPane missionDisplayScrollPane;
    private MtM.view.swingcomponents.MPanel missionPane;
    // End of variables declaration//GEN-END:variables

}
