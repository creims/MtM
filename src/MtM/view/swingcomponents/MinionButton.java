/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MtM.view.swingcomponents;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 *
 * @author Colin
 */
public class MinionButton extends JPanel implements MouseListener {

    private int btnID;
    private boolean selected;
    private static Border borderHover;
    private MinionPane minionPane;

    /**
     * Creates new form MinionButton
     *
     * @param id - the button's id
     */
    public MinionButton() {
        initComponents();
        this.btnID = 0;
        this.addMouseListener(this);
        borderHover = BorderFactory.createLineBorder(Color.green);
        this.setBorder(null);
        selected = false;
        updateColor();
        this.dispatchEvent(new ActionEvent(this, ActionEvent.ACTION_FIRST, "paint"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 255, 255));
        setMaximumSize(new java.awt.Dimension(10000, 100000));
        setMinimumSize(new java.awt.Dimension(50, 50));
        setPreferredSize(new java.awt.Dimension(50, 50));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        processPress();

    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        this.requestFocus();
        this.setBorder(borderHover);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        this.setBorder(null);
    }

    private void updateColor() {
        if (selected) {
            this.setBackground(Color.red);
        } else {
            this.setBackground(Color.gray);
        }
    }

    public int getBtnID() {
        return btnID;
    }

    public void setBtnID(int btnID) {
        this.btnID = btnID;
    }

    public MinionPane getMinionPane() {
        return minionPane;
    }

    public void setMinionPane(MinionPane minionPane) {
        this.minionPane = minionPane;
    }

    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
        updateColor();
    }

    public void processPress() {
        setSelected(!selected);
        minionPane.processSelection(btnID);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
