package MtM.view.swingcomponents;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import javax.swing.JPanel;

/**
 *
 * @author Colin
 */
public class MPanel extends JPanel {

    protected final MButton[] btnArray;
    protected int index, selected;
    protected int btnHeight;
    protected boolean initialized;

    /**
     * Creates new form MinionPane
     */
    public MPanel() {
        initComponents();
        btnArray = new MButton[20];
        index = 0;
        selected = 0;
        initialized = false;
    }

    public void revertSize() {
        setPreferredSize(super.getPreferredSize());
    }

    public void addMBtn() {
        MButton newBtn = new MButton();
        int size = getWidth() - 20;
        newBtn.setPreferredSize(new Dimension(size, size / 2));
        newBtn.setLocation(10, 10 + index * btnHeight);
        newBtn.setBtnID(index);
        btnArray[index] = newBtn;
        index++;
        add(newBtn);
        revalidate();
        newBtn.setMPanel(this);
        newBtn.processPress();
    }

    @Override
    public Dimension getPreferredSize() {
        if (!initialized) {
            initialized = true;
            btnHeight = super.getPreferredSize().height / 4;
            return super.getPreferredSize();
        }

        if (index < 4) {
            return new Dimension(getWidth(), (btnHeight - 2) * 4 + 5);
        }
        return new Dimension(getWidth(), (btnHeight - 2) * (index + 1) + 5);
    }

    public void clear() {
        Arrays.fill(btnArray, null);
        index = 0;
    }

    public void setSelection(int id) {
        btnArray[id].setSelected(true);
    }

    public void processSelection(int id) {
        selected = id;
        for (int i = 0; i < index; i++) {
            if (btnArray[i] == null || i == selected) {
                continue;
            }
            btnArray[i].setSelected(false);
        }

        fireActionEvent(new ActionEvent(this, ActionEvent.ACTION_FIRST, "" + id));
    }

    public void addActionListener(ActionListener l) {
        listenerList.add(ActionListener.class, l);
    }

    public void swap(int i1, int i2) {
        MButton temp = btnArray[i1];
        btnArray[i1] = btnArray[i2];
        btnArray[i2] = temp;

        reorderButtons();
    }

    private void reorderButtons() {
        for (MButton m : btnArray) {
            if (m == null) {
                break;
            }
            remove(m);
        }

        for (int i = 0; i < btnArray.length; i++) {
            MButton m = btnArray[i];
            if (m == null) {
                break;
            }
            m.setLocation(10, 10 + i * btnHeight);
            m.setBtnID(i);
            add(m);
        }
    }

    public int getSelected() {
        return selected;
    }

    public void setActive(int i, boolean state) {
        btnArray[i].setActive(state);
    }

    public boolean getActive(int i) {
        return btnArray[i].getActive();
    }

    protected void fireActionEvent(ActionEvent e) {
        for (ActionListener a : listenerList.getListeners(ActionListener.class)) {
            a.actionPerformed(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(60, 60));
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 10));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
